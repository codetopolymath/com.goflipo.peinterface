// Enhanced App.js - SMS Sender with Primary and Backup Modes
import React from 'react';
import { ThemeProvider } from '@mui/material';
import theme from './utils/theme';
import { SMSProvider } from './contexts/SMSContext';
import AppLayout from './components/layout/AppLayout';
import MainForm from './components/forms/MainForm';
import { ApiModeSelector, CorsWarning } from './components/ui/ApiComponents';
import { ResultsDisplay, DetailsDialog } from './components/ui/Results';
    secondary: { main: '#f50057' },
    success: { main: '#4caf50' },
    error: { main: '#f44336' },
    background: { default: '#f5f5f5' }
  },
  typography: {
    fontFamily: 'Roboto, "Helvetica Neue", Arial, sans-serif'
  },
  components: {
    MuiPaper: { styleOverrides: { root: { borderRadius: 8 } } },
    MuiButton: { styleOverrides: { root: { borderRadius: 4, textTransform: 'none' } } }
  }
});

function App() {
  // State hooks
  const [formData, setFormData] = useState(DEFAULT_FORM_DATA);
  const [contacts, setContacts] = useState([DEFAULT_CONTACT]);
  const [response, setResponse] = useState({ loading: false, success: false, error: null, message: '' });
  const [detailsOpen, setDetailsOpen] = useState(false);
  const [detailsContent, setDetailsContent] = useState(null);
  const [inputMode, setInputMode] = useState(0);
  const [bulkNumbers, setBulkNumbers] = useState('');
  const [corsError, setCorsError] = useState(false);
  const [apiMode, setApiMode] = useState('primary'); // 'primary' or 'backup'
  const [messageType, setMessageType] = useState('SIMPLE MESSAGE');

  // Event handlers
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleContactChange = (index, value) => {
    const updatedContacts = [...contacts];
    updatedContacts[index].number = value;
    setContacts(updatedContacts);
  };

  const handleBulkNumbersChange = (e) => setBulkNumbers(e.target.value);

  const handleTabChange = (event, newValue) => {
    setInputMode(newValue);
    
    if (newValue === 0 && contacts.length > 0) {
      setContacts([contacts[0]]);
    }
    
    if (newValue === 1) {
      const numbersText = contacts.map(contact => contact.number).join('\n');
      setBulkNumbers(numbersText);
    }
  };

  const handleApiModeChange = (event, newMode) => {
    if (newMode !== null) {
      setApiMode(newMode);
      // Reset coverage for different modes
      if (newMode === 'backup') {
        setFormData(prev => ({ ...prev, coverage: '+91' }));
      } else {
        setFormData(prev => ({ ...prev, coverage: '91' }));
      }
    }
  };

  const handleMessageTypeChange = (e) => {
    const newType = e.target.value;
    setMessageType(newType);
    setFormData(prev => ({ ...prev, message: MESSAGE_TEMPLATES[newType] }));
  };

  // Actions
  const addContact = () => setContacts(prev => [...prev, { number: '', status: 'pending', result: null }]);

  const removeContact = (index) => {
    if (contacts.length > 1) {
      setContacts(prev => prev.filter((_, i) => i !== index));
    }
  };

  const generateSampleNumbers = () => {
    setBulkNumbers("9876543210\n8765432109\n7654321098\n6543210987\n5432109876");
  };

  const showDetails = (data) => {
    setDetailsContent(data);
    setDetailsOpen(true);
  };

  const resetForm = () => {
    setFormData(DEFAULT_FORM_DATA);
    setContacts([DEFAULT_CONTACT]);
    setBulkNumbers('');
    setResponse({ loading: false, success: false, error: null, message: '' });
    setMessageType('SIMPLE MESSAGE');
  };

  // Process bulk numbers from textarea
  const processBulkNumbers = () => {
    const numbers = bulkNumbers
      .split('\n')
      .map(num => num.trim())
      .filter(num => num.length > 0);
    
    if (numbers.length === 0) {
      setResponse({
        loading: false,
        success: false,
        error: "Please enter at least one phone number",
        message: "Please enter at least one phone number"
      });
      return false;
    }
    
    const newContacts = numbers.map(number => ({
      number,
      status: 'pending',
      result: null
    }));
    
    setContacts(newContacts);
    return true;
  };

  // Primary API calls (existing methods)
  const fetchScrubbingLogs = async (data) => {
    try {
      const params = new URLSearchParams();
      Object.entries(data).forEach(([key, value]) => {
        params.append(key, value);
      });

      const response = await fetch(`${PRIMARY_SCRUBBING_API}?${params.toString()}`, {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        mode: 'cors'
      });

      if (!response.ok) {
        throw new Error(`Scrubbing API error: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      if (error.message.includes('Failed to fetch') || 
          error.message.includes('NetworkError') || 
          error.message.includes('CORS')) {
        setCorsError(true);
        throw new Error('CORS Error: Unable to access the API directly from the browser.');
      }
      throw error;
    }
  };

  const sendSMS = async (data, authcode) => {
    try {
      const params = new URLSearchParams({
        key: '566321AF6EB69D',
        campaign: '245',
        routeid: data.routes,
        type: 'text',
        contacts: data.number,
        peid: data.pe_id,
        cid: data.content_id,
        contentid: data.content_id,
        senderid: data.senderid,
        authcode: authcode,
        msg: data.message
      });

      const response = await fetch(`${PRIMARY_SMS_API}?${params.toString()}`, {
        method: 'GET',
        headers: {
          'Accept': '*/*',
          'Content-Type': 'application/json'
        },
        mode: 'cors'
      });

      if (!response.ok) {
        throw new Error(`SMS API error: ${response.status}`);
      }

      const textResponse = await response.text();
      
      if (textResponse.startsWith('SMS-SHOOT-ID')) {
        return {
          success: true,
          smsShootId: textResponse,
          rawResponse: textResponse
        };
      } else {
        try {
          return JSON.parse(textResponse);
        } catch (e) {
          return {
            success: true,
            rawResponse: textResponse
          };
        }
      }
    } catch (error) {
      if (error.message.includes('Failed to fetch') || 
          error.message.includes('NetworkError') || 
          error.message.includes('CORS')) {
        setCorsError(true);
        throw new Error('CORS Error: Unable to access the API directly from the browser.');
      }
      throw error;
    }
  };

  // Backup API call
  const processBackupAPI = async (contact) => {
    try {
      const payload = {
        senderid: formData.senderid,
        pe_id: formData.pe_id,
        number: contact.number,
        content_id: formData.content_id,
        message: formData.message
      };

      const response = await fetch(BACKUP_API, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        throw new Error(`Backup API error: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.error) {
        throw new Error(data.error);
      }

      return data;
    } catch (error) {
      throw error;
    }
  };

  // Process a single contact
  const processContact = async (contact, index) => {
    try {
      setContacts(prevContacts => {
        const updated = [...prevContacts];
        updated[index].status = 'processing';
        return updated;
      });
      
      if (apiMode === 'primary') {
        // Existing primary flow
        const scrubbingResponse = await fetchScrubbingLogs({
          ...formData,
          number: contact.number
        });
        
        if (scrubbingResponse.status && scrubbingResponse.data && scrubbingResponse.data.authcode) {
          const authcode = scrubbingResponse.data.authcode;
          const smsResponse = await sendSMS({
            ...formData,
            number: contact.number
          }, authcode);
          
          setContacts(prevContacts => {
            const updated = [...prevContacts];
            updated[index].status = 'success';
            updated[index].result = { scrubbing: scrubbingResponse, sms: smsResponse };
            return updated;
          });
          
          return true;
        } else {
          throw new Error('Failed to get valid authcode from scrubbing API');
        }
      } else {
        // Backup flow
        const backupResponse = await processBackupAPI(contact);
        
        setContacts(prevContacts => {
          const updated = [...prevContacts];
          updated[index].status = 'success';
          updated[index].result = backupResponse;
          return updated;
        });
        
        return true;
      }
    } catch (error) {
      setContacts(prevContacts => {
        const updated = [...prevContacts];
        updated[index].status = 'error';
        updated[index].error = error.message;
        return updated;
      });
      
      return false;
    }
  };

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    setCorsError(false);
    
    if (inputMode === 1) {
      const success = processBulkNumbers();
      if (!success) return;
    }
    
    const emptyContacts = contacts.filter(contact => !contact.number.trim());
    if (emptyContacts.length > 0) {
      setResponse({
        loading: false,
        success: false,
        error: "Please enter all contact numbers",
        message: "Please enter all contact numbers"
      });
      return;
    }
    
    setResponse({
      loading: true,
      success: false, 
      error: null,
      message: `Processing ${contacts.length} contact(s) using ${apiMode} mode...`
    });
    
    setContacts(prevContacts => prevContacts.map(contact => ({
      ...contact,
      status: 'pending',
      result: null,
      error: null
    })));
    
    let successCount = 0;
    let errorCount = 0;
    
    for (let i = 0; i < contacts.length; i++) {
      if (corsError) break;
      
      const success = await processContact(contacts[i], i);
      if (success) {
        successCount++;
      } else {
        errorCount++;
        if (corsError) break;
      }
    }
    
    setResponse({
      loading: false,
      success: successCount > 0,
      error: corsError 
        ? 'CORS Error: Unable to access the API directly.' 
        : errorCount > 0 
          ? `Failed to send SMS to ${errorCount} contact(s)` 
          : null,
      message: corsError 
        ? 'CORS Error: Unable to access the API directly.'
        : `Successfully sent SMS to ${successCount} out of ${contacts.length} contact(s) using ${apiMode} mode`
    });
  };

  // UI Components
  const renderApiModeToggle = () => (
    <Box sx={{ display: 'flex', justifyContent: 'center', mb: 3 }}>
      <ToggleButtonGroup
        color="primary"
        value={apiMode}
        exclusive
        onChange={handleApiModeChange}
        aria-label="API Mode"
      >
        <ToggleButton value="primary" aria-label="primary mode">
          <PrimaryIcon sx={{ mr: 1 }} />
          Primary Mode
        </ToggleButton>
        <ToggleButton value="backup" aria-label="backup mode">
          <BackupIcon sx={{ mr: 1 }} />
          Backup Mode
        </ToggleButton>
      </ToggleButtonGroup>
    </Box>
  );

  const renderMessageTypeSelector = () => (
    <Grid item xs={12}>
      <TextField
        select
        fullWidth
        label="Message Type"
        value={messageType}
        onChange={handleMessageTypeChange}
        SelectProps={{ native: true }}
        variant="outlined"
        margin="normal"
        InputProps={{ startAdornment: <InputAdornment position="start"><CategoryIcon /></InputAdornment> }}
      >
        {Object.keys(MESSAGE_TEMPLATES).map((type) => (
          <option key={type} value={type}>
            {type}
          </option>
        ))}
      </TextField>
    </Grid>
  );

  const renderFormFields = () => (
    <Grid container spacing={3}>
      {/* Message type selector for backup mode */}
      {apiMode === 'backup' && renderMessageTypeSelector()}
      
      {/* First row */}
      <Grid item xs={12} sm={4}>
        <TextField
          fullWidth label="Coverage Code" name="coverage" value={formData.coverage}
          onChange={handleChange} required variant="outlined" margin="normal"
          disabled={apiMode === 'backup'}
          InputProps={{ startAdornment: <InputAdornment position="start"><LanguageIcon /></InputAdornment> }}
        />
      </Grid>
      <Grid item xs={12} sm={4}>
        <TextField
          fullWidth label="Route ID" name="routes" value={formData.routes}
          onChange={handleChange} required variant="outlined" margin="normal"
          disabled={apiMode === 'backup'}
          InputProps={{ startAdornment: <InputAdornment position="start"><RouteIcon /></InputAdornment> }}
        />
      </Grid>
      <Grid item xs={12} sm={4}>
        <TextField
          fullWidth label="Sender ID" name="senderid" value={formData.senderid}
          onChange={handleChange} required variant="outlined" margin="normal"
          InputProps={{ startAdornment: <InputAdornment position="start"><UserIcon /></InputAdornment> }}
        />
      </Grid>
      
      {/* Second row */}
      <Grid item xs={12} sm={6}>
        <TextField
          fullWidth label="Principal Entity ID" name="pe_id" value={formData.pe_id}
          onChange={handleChange} required variant="outlined" margin="normal"
          helperText="Default: 1501550540000010698"
          InputProps={{ startAdornment: <InputAdornment position="start"><BadgeIcon /></InputAdornment> }}
        />
      </Grid>
      <Grid item xs={12} sm={6}>
        <TextField
          fullWidth label="Content ID" name="content_id" value={formData.content_id}
          onChange={handleChange} required variant="outlined" margin="normal"
          helperText="Default: 1507167577648640421"
          InputProps={{ startAdornment: <InputAdornment position="start"><EmailIcon /></InputAdornment> }}
        />
      </Grid>
      
      {/* Message field */}
      <Grid item xs={12}>
        <TextField
          fullWidth label="Message Content" name="message" value={formData.message}
          onChange={handleChange} required variant="outlined" margin="normal"
          multiline rows={4} helperText={`${formData.message.length} characters`}
          InputProps={{ startAdornment: <InputAdornment position="start"><MessageIcon /></InputAdornment> }}
        />
      </Grid>
    </Grid>
  );

  const renderSingleEntry = () => (
    <>
      {contacts.map((contact, index) => (
        <Box 
          key={index} 
          sx={{ display: 'flex', alignItems: 'center', mb: 2, flexWrap: 'wrap', gap: 1 }}
        >
          <TextField
            sx={{ flex: 1, minWidth: '200px' }}
            label={`Phone Number ${index + 1}`}
            value={contact.number}
            onChange={(e) => handleContactChange(index, e.target.value)}
            required variant="outlined" placeholder="Enter phone number"
            InputProps={{ startAdornment: <InputAdornment position="start"><PhoneIcon /></InputAdornment> }}
          />
          
          <IconButton 
            color="error" onClick={() => removeContact(index)}
            disabled={contacts.length === 1} size="small"
          >
            <DeleteIcon />
          </IconButton>
          
          {contact.status === 'processing' && <CircularProgress size={24} />}
          
          {contact.status === 'success' && (
            <Chip icon={<CheckIcon />} label="Sent" color="success" size="small" variant="outlined" />
          )}
          
          {contact.status === 'error' && (
            <Chip icon={<ErrorIcon />} label="Failed" color="error" size="small" variant="outlined" />
          )}
        </Box>
      ))}
      
      <Button
        startIcon={<AddIcon />} onClick={addContact}
        variant="outlined" color="primary" sx={{ mt: 1 }}
      >
        Add Another Contact
      </Button>
    </>
  );

  const renderBulkEntry = () => (
    <Box sx={{ mb: 2 }}>
      <Typography variant="body2" color="text.secondary" gutterBottom>
        Enter one phone number per line
      </Typography>
      
      <Box sx={{ display: 'flex', gap: 1, mb: 1 }}>
        <Button
          startIcon={<CopyIcon />} variant="outlined" size="small"
          onClick={generateSampleNumbers}
        >
          Show Example
        </Button>
      </Box>
      
      <TextField
        fullWidth multiline rows={8} variant="outlined"
        placeholder="Enter phone numbers (one per line)"
        value={bulkNumbers} onChange={handleBulkNumbersChange}
        InputProps={{ startAdornment: <InputAdornment position="start"><ListIcon /></InputAdornment> }}
      />
      
      <Typography 
        variant="caption" color="text.secondary" align="right" display="block" sx={{ mt: 1 }}
      >
        {bulkNumbers.split('\n').filter(line => line.trim().length > 0).length} numbers entered
      </Typography>
    </Box>
  );

  const renderResults = () => (
    <Box sx={{ mt: 3 }}>
      <Typography variant="h6" gutterBottom>Results</Typography>
      
      <Grid container spacing={2}>
        {contacts.map((contact, index) => (
          <Grid item xs={12} sm={6} md={4} key={index}>
            <Card 
              variant="outlined" 
              sx={{ 
                borderLeft: 5,
                borderColor: contact.status === 'success' 
                  ? 'success.main' 
                  : contact.status === 'error' 
                  ? 'error.main' 
                  : 'primary.main'
              }}
            >
              <CardHeader
                title={
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <PhoneIcon fontSize="small" />
                    <Typography variant="body1" fontWeight="medium">
                      {contact.number}
                    </Typography>
                  </Box>
                }
                action={
                  <Chip 
                    label={
                      contact.status === 'success' ? 'Sent' : 
                      contact.status === 'error' ? 'Failed' :
                      contact.status === 'processing' ? 'Processing' : 'Pending'
                    }
                    color={
                      contact.status === 'success' ? 'success' : 
                      contact.status === 'error' ? 'error' : 'default'
                    }
                    size="small"
                  />
                }
              />
              <CardContent>
                {contact.status === 'success' && contact.result && (
                  <>
                    {apiMode === 'primary' ? (
                      <>
                        <Typography variant="body2" color="text.secondary">
                          AuthCode: {contact.result.scrubbing?.data?.authcode}
                        </Typography>
                        {contact.result.sms?.rawResponse && (
                          <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                            SMS Response: {contact.result.sms.rawResponse}
                          </Typography>
                        )}
                      </>
                    ) : (
                      <>
                        <Typography variant="body2" color="text.secondary">
                          Mode: Backup
                        </Typography>
                        {contact.result.init_response?.data?.authcode && (
                          <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
                            AuthCode: {contact.result.init_response.data.authcode}
                          </Typography>
                        )}
                      </>
                    )}
                    <Button size="small" onClick={() => showDetails(contact.result)} sx={{ mt: 1 }}>
                      View Details
                    </Button>
                  </>
                )}
                
                {contact.status === 'error' && (
                  <Typography variant="body2" color="error">
                    {contact.error}
                  </Typography>
                )}
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>
    </Box>
  );

  const renderCorsInfo = () => (
    <Alert 
      severity="warning" 
      icon={<WarningIcon />}
      sx={{ mb: 3 }}
    >
      <Typography variant="subtitle1" component="div">
        CORS Error Detected
      </Typography>
      <Typography variant="body2" component="div">
        This application is making direct API calls which may be blocked by browser security policies.
        Options to fix this:
      </Typography>
      <Box component="ul" sx={{ pl: 2, mt: 1 }}>
        <li>Install a CORS browser extension (development only)</li>
        <li>Run the server proxy from the server folder</li>
        <li>Configure the target APIs to allow your origin</li>
      </Box>
    </Alert>
  );

  return (
    <ThemeProvider theme={theme}>
      <Box sx={{ flexGrow: 1, minHeight: '100vh', display: 'flex', flexDirection: 'column' }}>
        {/* Header */}
        <AppBar position="static" color="primary">
          <Toolbar>
            <SendIcon sx={{ mr: 2 }} />
            <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
              SMS Sender Application
            </Typography>
          </Toolbar>
        </AppBar>
        
        {/* Main Content */}
        <Container maxWidth="lg" sx={{ mt: 4, mb: 4, flexGrow: 1 }}>
          {/* API Mode Toggle */}
          {renderApiModeToggle()}
          
          {/* Current Mode Indicator */}
          <Box sx={{ textAlign: 'center', mb: 3 }}>
            <Chip 
              icon={apiMode === 'primary' ? <PrimaryIcon /> : <BackupIcon />}
              label={`Using ${apiMode === 'primary' ? 'Primary' : 'Backup'} API Mode`}
              color={apiMode === 'primary' ? 'primary' : 'secondary'}
              variant="outlined"
            />
          </Box>
          
          {/* CORS Warning if needed */}
          {corsError && renderCorsInfo()}
          
          {/* Form */}
          <Paper elevation={3} sx={{ p: 3, mb: 4 }}>
            <Typography variant="h5" component="h2" gutterBottom>
              Send SMS Message
            </Typography>
            
            <Box component="form" onSubmit={handleSubmit} noValidate>
              {renderFormFields()}
              
              <Divider sx={{ my: 3 }} />
              
              {/* Contact numbers section */}
              <Box sx={{ mb: 3 }}>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                  <PhoneIcon sx={{ mr: 1 }} />
                  <Typography variant="h6">Contact Numbers</Typography>
                </Box>
                
                <Typography variant="body2" color="text.secondary" gutterBottom>
                  Enter one or multiple phone numbers to send the SMS
                </Typography>
                
                {/* Tabs for switching between input modes */}
                <Tabs 
                  value={inputMode} onChange={handleTabChange} sx={{ mb: 2 }}
                  indicatorColor="primary" textColor="primary"
                >
                  <Tab 
                    icon={<PhoneIcon fontSize="small" />} 
                    iconPosition="start" 
                    label="Single Entry" 
                  />
                  <Tab 
                    icon={<ListIcon fontSize="small" />} 
                    iconPosition="start" 
                    label="Bulk Entry" 
                  />
                </Tabs>
                
                {/* Input mode content */}
                {inputMode === 0 ? renderSingleEntry() : renderBulkEntry()}
              </Box>
              
              <Divider sx={{ my: 3 }} />
              
              {/* Action buttons */}
              <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2 }}>
                <Button
                  variant="outlined" onClick={resetForm} disabled={response.loading}
                >
                  Reset Form
                </Button>
                <Button
                  type="submit" variant="contained" color="primary" 
                  startIcon={response.loading ? <CircularProgress size={20} color="inherit" /> : <SendIcon />}
                  disabled={response.loading}
                >
                  {response.loading ? 'Processing...' : 'Send SMS'}
                </Button>
              </Box>
            </Box>
          </Paper>
          
          {/* Response container */}
          {response.message && (
            <Paper elevation={3} sx={{ p: 3, mb: 4 }}>
              <Alert 
                severity={response.error ? "error" : response.success ? "success" : "info"}
                sx={{ mb: 2 }}
              >
                {response.message}
              </Alert>
              
              {contacts.some(contact => contact.status === 'success' || contact.status === 'error') && 
                renderResults()
              }
            </Paper>
          )}
        </Container>
        
        {/* Details Dialog */}
        <Dialog
          open={detailsOpen} onClose={() => setDetailsOpen(false)} maxWidth="md" fullWidth
        >
          <DialogTitle>API Response Details</DialogTitle>
          <DialogContent>
            {detailsContent && (
              <>
                <Typography variant="subtitle1" gutterBottom>
                  Scrubbing API Response:
                </Typography>
                <Box component="pre" sx={{ bgcolor: 'background.paper', p: 2, borderRadius: 1, 
                                         overflow: 'auto', fontSize: '0.875rem', mb: 2 }}>
                  {JSON.stringify(detailsContent.scrubbing, null, 2)}
                </Box>
                
                <Typography variant="subtitle1" gutterBottom>
                  SMS API Response:
                </Typography>
                <Box component="pre" sx={{ bgcolor: 'background.paper', p: 2, borderRadius: 1, 
                                         overflow: 'auto', fontSize: '0.875rem' }}>
                  {typeof detailsContent.sms === 'string' 
                    ? detailsContent.sms 
                    : JSON.stringify(detailsContent.sms, null, 2)}
                </Box>
              </>
            )}
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setDetailsOpen(false)}>Close</Button>
          </DialogActions>
        </Dialog>
      </Box>
    </ThemeProvider>
  );
}

export default App;